* basic
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq line-number-mode t)
(setq column-number-mode t)
#+END_SRC

* follow split
#+BEGIN_SRC emacs-lisp
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

* fonts 
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC

* yes/no
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* emmet for html/css 
ctrl+return
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
:ensure t 
:config 
   (add-hook 'html-mode-hook 'emmet-mode)
   (add-hook 'css-mode-hook  'emmet-mode))
#+END_SRC
* editorconfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+END_SRC

* relativenumbers
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :ensure t
  :config
    (setq linum-relative-current-symbol "")
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
* prettierJs
#+BEGIN_SRC emacs-lisp
(use-package prettier-js
:ensure t
:config 
(add-hook 'js2-mode-hook 'prettier-js-mode)
(add-hook 'web-mode-hook 'prettier-js-mode)
(add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2)))
)
#+END_SRC

* no backups
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC

* terminal
#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
(global-set-key (kbd "s-t") 'ansi-term)
(global-set-key (kbd "C-s-l") 'term-line-mode)
(global-set-key (kbd "C-s-c") 'term-char-mode)
#+END_SRC

* brackets
#+BEGIN_SRC emacs-lisp
(setq electric-pair-pairs '(
                           (?\{ . ?\})
                           (?\( . ?\))
                           (?\[ . ?\])
                           (?\" . ?\")
                           ))
(electric-pair-mode t)
(use-package beacon
  :ensure t
  :config
    (beacon-mode 1))
(global-subword-mode 1)
(show-paren-mode 1)
#+END_SRC

* company mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

(with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

* buffer
#+BEGIN_SRC emacs-lisp

(defun kill-current-buffer ()
  "Kills the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-current-buffer)
(setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
(setq ibuffer-expert t)
(global-set-key (kbd "C-x b") 'ibuffer)
(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
(defun close-all-buffers ()
  "Kill all buffers without regard for their origin."
  (interactive)
  (mapc 'kill-buffer (buffer-list)))
(global-set-key (kbd "C-M-s-k") 'close-all-buffers)
#+END_SRC

* rainbo
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :config
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

* avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* tide
#+BEGIN_SRC emacs-lisp
; TypeScript
(use-package typescript-mode
:ensure t
  :mode (("\\.ts\\'" . typescript-mode)
         ("\\.tsx\\'" . typescript-mode)))


(defun setup-tide-mode ()
  "Set up Tide mode."
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save-mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (company-mode +1))
(use-package tide
:ensure t
  :config
  (progn
    (add-hook 'typescript-mode-hook #'setup-tide-mode)
    (add-hook 'js-mode-hook #'setup-tide-mode)
    (add-hook 'js2-mode-hook #'setup-tide-mode)
    (add-hook 'rjsx-mode-hook #'setup-tide-mode)))
    (add-to-list 'auto-mode-alist '("\\.json\\'" . fundamental-mode))

#+END_SRC
* js2-mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode 
:ensure t 
:config 
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-hook 'js2-mode-hook #'js2-refactor-mode)
(js2r-add-keybindings-with-prefix "C-c C-k")
)

#+END_SRC
* json
#+BEGIN_SRC emacs-lisp
(use-package json-mode
:ensure t
  :mode "\\.js\\(?:on\\|[hl]int\\(rc\\)?\\)\\'"
  :config
  (add-hook 'json-mode-hook #'prettier-js-mode)
  (setq json-reformat:indent-width 2)
  (setq json-reformat:pretty-string? t)
(setq js-indent-level 2))
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :init
    (projectile-mode 1)



(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
* linenumber
#+BEGIN_SRC emacs-lisp
(setq line-number-mode t)
(setq column-number-mode t)
#+END_SRC

* dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
    (setq dashboard-startup-banner "~/.emacs.d/img/dashLogo.png")
  (dashboard-setup-startup-hook)
(setq show-week-agenda-p t)
(setq dashboard-items '((recents  . 3)
                        (bookmarks . 3)
                        (projects . 3)
			(agenda . 5)
)
))
#+END_SRC
* which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
:ensure t
:config
    (which-key-mode)
(which-key-setup-side-window-right)
)
#+END_SRC
* swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind ("C-s" . 'swiper)
  ("C-'" . 'swiper-query-replace)
  )
#+END_SRC

* neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
:ensure t
:config
(global-set-key [f8] 'neotree-toggle)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
)(use-package all-the-icons
:ensure t)
#+END_SRC

* haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
:ensure t)
#+END_SRC

* org-mode
#+BEGIN_SRC emacs-lisp
(use-package org
:ensure )
(use-package ob-http
:ensure t)

(org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (css . t)
     (http . t)
     (C . t)
     (haskell . t)
     (js . t)
     (python . t)
     (haskell . t)

))

(global-set-key (kbd "C-c a") 'org-agenda)

#+END_SRC

* org-bullet
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:ensure t
:config
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* multi-cursor
#+BEGIN_SRC emacs-lisp
        (use-package multiple-cursors
          :ensure t
          :config 
          (require 'multiple-cursors)

(global-set-key (kbd "C-S-m C-S-m") 'mc/edit-lines)
  (global-set-key (kbd "s-n") 'mc/mark-next-like-this)
  (global-set-key (kbd "s-p") 'mc/mark-previous-like-this)
  (global-set-key (kbd "s-y s-j") 'mc/mark-all-like-this)
    )
#+END_SRC
* theme



(use-package kaolin-themes
:ensure t
  :config

  (load-theme 'kaolin-dark t)
;;  (load-theme 'kaolin-aurora  t)
;; (load-theme  'kaolin-light t)
;; (load-theme 'kaolin-eclipse t)
;;  (load-theme 'kaolin-ocean t)
 ;; (load-theme 'kaolin-galaxy t)
;; (kaolin-treemacs-theme)
)
#+BEGIN_SRC emacs-lisp


(use-package one-themes
:ensure t 
:config 
(load-theme 'one-dark t))
#+END_SRC
* ivy
#+BEGIN_SRC emacs-lisp
(use-package amx
:ensure t
  :config (amx-mode))

;; ivy: incremental narrowing framework for Emacs
;; https://github.com/abo-abo/swiper
(use-package ivy
:ensure t
  :bind (("C-c u" . ivy-resume))
  :config
  (ivy-mode)


  (setq ivy-use-virtual-buffers t
        ivy-height 13
        ivy-count-format "%d/%d "
        ivy-initial-inputs-alist nil
        ivy-virtual-abbreviate 'full ; Show the full virtual file paths
        ivy-extra-directories nil ; default value: ("../" "./")
        ivy-format-function 'ivy-format-function-arrow
        ivy-wrap t
        ivy-action-wrap t
        ivy-use-selectable-prompt t)

  (bind-keys
   :map ivy-occur-grep-mode-map
   ("n" . ivy-occur-next-line)
   ("p" . ivy-occur-previous-line)
   ("b" . backward-char)
   ("f" . forward-char)
   ("v" . ivy-occur-press) ; default f
   ("RET" . ivy-occur-press)))

#+END_SRC
* counsel:
#+BEGIN_SRC emacs-lisp
(use-package counsel
:ensure t
  :after ivy
  :bind
  ((:map read-expression-map
         ("C-r" . counsel-expression-history))
   (:map counsel-find-file-map
         ("<left>" . counsel-up-directory)
         ("<right>" . counsel-down-directory)))

  :config

  (counsel-mode)
  (with-eval-after-load 'org-agenda
    (bind-key "C-c C-q" #'counsel-org-tag-agenda org-agenda-mode-map))

  (if (executable-find "rg")
      ;; if rg is installed, use rg for `counsel-grep-or-swiper' and `counsel-rg'
      (setq counsel-grep-base-command "rg --line-number --smart-case -M 150 --color never --mmap --no-heading %s %s"
            ;; add `--follow' option to allow search through symbolic links
            counsel-rg-base-command "rg --line-number --smart-case -M 150 --color never --follow --mmap --no-heading %s"
            ;; Use ripgrep for counsel-git
            counsel-git-cmd "rg --files")
    ;; ignore case sensitivity for counsel grep
    (setq counsel-grep-base-command "grep -nEi \"%s\" %s"))

  (defun reloading (cmd)
    (lambda (x)
      (funcall cmd x)
      (ivy--reset-state ivy-last)))
  (defun given-file (cmd prompt) ; needs lexical-binding
    (lambda (source)
      (let ((target
             (let ((enable-recursive-minibuffers t))
               (read-file-name
                (format "%s %s to:" prompt source)))))
        (funcall cmd source target 1))))
  (defun confirm-delete-file (x)
    (dired-delete-file x 'confirm-each-subdirectory))

  (ivy-add-actions
   'counsel-find-file
   `(("p" (lambda (path) (with-ivy-window (insert (file-relative-name path default-directory)))) "insert relative path")
     ("P" (lambda (path) (with-ivy-window (insert path))) "insert absolute path")
     ("l" (lambda (path) "Insert org-link with relative path"
            (with-ivy-window (insert (format "[[./%s]]" (file-relative-name path default-directory))))) "insert org-link (rel. path)")
     ("L" (lambda (path) "Insert org-link with absolute path"
            (with-ivy-window (insert (format "[[%s]]" path)))) "insert org-link (abs. path)")))

  (ivy-add-actions
   'counsel-projectile-find-file
   `(("m" ,(reloading (given-file #'rename-file "Move")) "move")
     ("b" counsel-find-file-cd-bookmark-action "cd bookmark")))

  ;;;###autoload
  (defun +ivy-git-grep-other-window-action (x)
    "Opens the current candidate in another window."
    (when (string-match "\\`\\(.*?\\):\\([0-9]+\\):\\(.*\\)\\'" x)
      (select-window
       (with-ivy-window
         (let ((file-name   (match-string-no-properties 1 x))
               (line-number (match-string-no-properties 2 x)))
           (find-file-other-window (expand-file-name file-name (ivy-state-directory ivy-last)))
           (goto-char (point-min))
           (forward-line (1- (string-to-number line-number)))
           (re-search-forward (ivy--regex ivy-text t) (line-end-position) t)
           (run-hooks 'counsel-grep-post-action-hook)
           (selected-window))))))

  (ivy-add-actions
   'counsel-ag ; also applies to `counsel-rg' & `counsel-pt'
   '(("O" +ivy-git-grep-other-window-action "open in other window")))

  ;; find file at point
  (setq counsel-find-file-at-point t)

  ;; ignore . files or temporary files
  (setq counsel-find-file-ignore-regexp
        (concat
         ;; File names beginning with # or .
         "\\(?:\\`[#.]\\)"
         ;; File names ending with # or ~
         "\\|\\(?:\\`.+?[#~]\\'\\)"))

  (setq counsel-mode-override-describe-bindings t
        counsel-describe-function-function 'helpful-function
        counsel-describe-variable-function 'helpful-variable
        counsel-describe-function-preselect #'ivy-function-called-at-point)

  (setq counsel-yank-pop-preselect-last t)
  (setq counsel-grep-post-action-hook '(recenter))

  (bind-keys
   ([remap finder-by-keyword] . counsel-package) ; C-h p
   ([remap bookmark-set] . counsel-bookmark)
   ([remap info-lookup-symbol] . counsel-info-lookup-symbol)
   ("C-c d s" . describe-symbol)
   ("C-c d f" . counsel-faces)
   ("C-c r g" . counsel-rg)))

;; Add more ivy features for projectile related commands
;; https://github.com/ericdanan/counsel-projectile/tree/master
(use-package counsel-projectile
:ensure t
  :after (counsel projectile)
:config (counsel-projectile-mode 1))
#+END_SRC

* fzf
#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "s-x") 'fzf)
#+END_SRC
* ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
:ensure t
)
(global-set-key (kbd "M-o") 'ace-window)
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
#+END_SRC

* drag
#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :ensure t
  :bind (("M-<up>" . drag-stuff-up)
	 ("M-<down>" . drag-stuff-down)
	 ("M-<left>" . shift-left)
	 ("M-<right>" . shift-right)))

#+END_SRC
